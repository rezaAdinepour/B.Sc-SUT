;//           ******************************************************
;//          **   Processor      : ATMEGA 32                       **
;//         ***   Frequency      : 8MHz External Clock             ***
;//        ****   AUTHOR         : Reza Adinepour                  ****
;//        ****   Linkedin       : linkedin.com/reza_adinepour/    ****
;//         ***   Student ID:    : 9814303                         ***
;//          **   Github         : github.com/reza_adinepour/      **
;//           ******************************************************
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;
;int sec = 0, min = 0, hour = 0;
;unsigned char str[17];
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014     if(PIND.2 == 0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0015     {
; 0000 0016         min++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0017         if(min == 60)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0018             min = 0;
;PCODE: $00000018 VOL: 0
; 0000 0019     }
;PCODE: $00000019 VOL: 0
; 0000 001A }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 001E {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001F     if(PIND.3 == 0)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0020     {
; 0000 0021         hour++;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0022         if(hour == 24)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0023             hour = 0;
;PCODE: $00000029 VOL: 0
; 0000 0024     }
;PCODE: $0000002A VOL: 0
; 0000 0025 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0029 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002A     sec++;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002B     if(sec == 60)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002C     {
; 0000 002D         sec = 0;
;PCODE: $00000037 VOL: 0
; 0000 002E         min++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002F         if(min == 60)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0030         {
; 0000 0031             min = 0;
;PCODE: $0000003E VOL: 0
; 0000 0032             hour++;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0033             if(hour == 24)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0034             {
; 0000 0035                 hour = 0;
;PCODE: $00000045 VOL: 0
; 0000 0036             }
; 0000 0037         }
;PCODE: $00000046 VOL: 0
; 0000 0038     }
;PCODE: $00000047 VOL: 0
; 0000 0039     sprintf(str, "time:%2d:%2d:%2d", hour, min, sec);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003A     lcd_clear();
;PCODE: $0000005B VOL: 0
; 0000 003B     lcd_puts(str);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003C }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;void main(void)
; 0000 003F {
;PCODE: $00000061 VOL: 0
; 0000 0040     DDRA = 0xff;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0041     PORTA = 0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0042 
; 0000 0043     DDRB = 0xff;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0044     PORTB = 0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0045 
; 0000 0046     DDRC = 0xff;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0047     PORTC = 0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0048 
; 0000 0049     DDRD = 0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 004A     PORTD = 0xff;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004B 
; 0000 004C     // Timer/Counter 2 initialization
; 0000 004D     // Clock source: TOSC1 pin
; 0000 004E     // Clock value: PCK2/128
; 0000 004F     // Mode: Normal top=0xFF
; 0000 0050     // OC2 output: Disconnected
; 0000 0051     ASSR=1<<AS2;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0052     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0053     TCNT2=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0054     OCR2=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0055 
; 0000 0056     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0057     TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0058 
; 0000 0059     // External Interrupt(s) initialization
; 0000 005A     // INT0: On
; 0000 005B     // INT0 Mode: Falling Edge
; 0000 005C     // INT1: On
; 0000 005D     // INT1 Mode: Falling Edge
; 0000 005E     // INT2: Off
; 0000 005F     GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0060     MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0061     MCUCSR=(0<<ISC2);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0062     GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0063 
; 0000 0064     // Alphanumeric LCD initialization
; 0000 0065     // Connections are specified in the
; 0000 0066     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0067     // RS - PORTA Bit 1
; 0000 0068     // RD - PORTA Bit 2
; 0000 0069     // EN - PORTA Bit 3
; 0000 006A     // D4 - PORTA Bit 4
; 0000 006B     // D5 - PORTA Bit 5
; 0000 006C     // D6 - PORTA Bit 6
; 0000 006D     // D7 - PORTA Bit 7
; 0000 006E     // Characters/line: 16
; 0000 006F     lcd_init(16);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070 
; 0000 0071     // Global enable interrupts
; 0000 0072     #asm("sei")
;PCODE: $00000087 VOL: 0
	sei
;PCODE: $00000088 VOL: 0
; 0000 0073 
; 0000 0074     while (1)
;PCODE: $00000089 VOL: 0
; 0000 0075     {
; 0000 0076 
; 0000 0077     }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0078 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
