
AVRASM ver. 2.1.30  E:\University\Micro\LAB\Servo Motor\Code\Debug\List\lcd&keypad.asm Sat May 09 03:34:34 2020

E:\University\Micro\LAB\Servo Motor\Code\Debug\List\lcd&keypad.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\University\Micro\LAB\Servo Motor\Code\Debug\List\lcd&keypad.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\University\Micro\LAB\Servo Motor\Code\Debug\List\lcd&keypad.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0074 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 0030
000034 0037
000035 0038
000036 0039      	.DB  0x30,0x0,0x37,0x0,0x38,0x0,0x39,0x0
000037 0034
000038 0035
000039 0036
00003a 0031      	.DB  0x34,0x0,0x35,0x0,0x36,0x0,0x31,0x0
00003b 0032
00003c 0033
00003d 002f
00003e 002a      	.DB  0x32,0x0,0x33,0x0,0x2F,0x0,0x2A,0x0
00003f 002b
000040 002d
000041 003d      	.DB  0x2B,0x0,0x2D,0x0,0x3D,0x0
                 _0x2020003:
000042 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000043 0002      	.DW  0x02
000044 0260      	.DW  _0x41
000045 0066      	.DW  _0x0*2
                 
000046 0002      	.DW  0x02
000047 0262      	.DW  _0x41+2
000048 0068      	.DW  _0x0*2+2
                 
000049 0002      	.DW  0x02
00004a 0264      	.DW  _0x41+4
00004b 006a      	.DW  _0x0*2+4
                 
00004c 0002      	.DW  0x02
00004d 0266      	.DW  _0x41+6
00004e 006c      	.DW  _0x0*2+6
                 
00004f 0002      	.DW  0x02
000050 0268      	.DW  _0x41+8
000051 006e      	.DW  _0x0*2+8
                 
000052 0002      	.DW  0x02
000053 026a      	.DW  _0x41+10
000054 0070      	.DW  _0x0*2+10
                 
000055 0002      	.DW  0x02
000056 026c      	.DW  _0x41+12
000057 0072      	.DW  _0x0*2+12
                 
000058 0002      	.DW  0x02
000059 026e      	.DW  _0x41+14
00005a 0074      	.DW  _0x0*2+14
                 
00005b 0002      	.DW  0x02
00005c 0270      	.DW  _0x41+16
00005d 0076      	.DW  _0x0*2+16
                 
00005e 0002      	.DW  0x02
00005f 0272      	.DW  _0x41+18
000060 0078      	.DW  _0x0*2+18
                 
000061 0002      	.DW  0x02
000062 0274      	.DW  _0x41+20
000063 007a      	.DW  _0x0*2+20
                 
000064 0002      	.DW  0x02
000065 0276      	.DW  _0x41+22
000066 007c      	.DW  _0x0*2+22
                 
000067 0002      	.DW  0x02
000068 0278      	.DW  _0x41+24
000069 007e      	.DW  _0x0*2+24
                 
00006a 0002      	.DW  0x02
00006b 027a      	.DW  _0x41+26
00006c 0080      	.DW  _0x0*2+26
                 
00006d 0002      	.DW  0x02
00006e 027c      	.DW  _0x41+28
00006f 0082      	.DW  _0x0*2+28
                 
000070 0002      	.DW  0x02
000071 027e      	.DW  __base_y_G101
000072 0084      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000073 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000074 94f8      	CLI
000075 27ee      	CLR  R30
000076 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000077 e0f1      	LDI  R31,1
000078 bffb      	OUT  GICR,R31
000079 bfeb      	OUT  GICR,R30
00007a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007b e08d      	LDI  R24,(14-2)+1
00007c e0a2      	LDI  R26,2
00007d 27bb      	CLR  R27
                 __CLEAR_REG:
00007e 93ed      	ST   X+,R30
00007f 958a      	DEC  R24
000080 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000081 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000082 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000083 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000084 93ed      	ST   X+,R30
000085 9701      	SBIW R24,1
000086 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000087 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000088 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000089 9185      	LPM  R24,Z+
00008a 9195      	LPM  R25,Z+
00008b 9700      	SBIW R24,0
00008c f061      	BREQ __GLOBAL_INI_END
00008d 91a5      	LPM  R26,Z+
00008e 91b5      	LPM  R27,Z+
00008f 9005      	LPM  R0,Z+
000090 9015      	LPM  R1,Z+
000091 01bf      	MOVW R22,R30
000092 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000093 9005      	LPM  R0,Z+
000094 920d      	ST   X+,R0
000095 9701      	SBIW R24,1
000096 f7e1      	BRNE __GLOBAL_INI_LOOP
000097 01fb      	MOVW R30,R22
000098 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000099 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009a bfed      	OUT  SPL,R30
00009b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009f 940c 00a1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;//Driving Step Motor With ATmega 32
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;
                 ;int Press_key(void);
                 ;void Display_key(int key);
                 ;
                 ;
                 ;void main(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000F 
                 ; 0000 0010 int i=0;
                 ; 0000 0011 int key;
                 ; 0000 0012 int n[]={0, 0, 0};
                 ; 0000 0013 int degree;
                 ; 0000 0014 DDRC=0x0F;
0000a1 9726      	SBIW R28,6
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 83e8      	ST   Y,R30
0000a4 83e9      	STD  Y+1,R30
0000a5 83ea      	STD  Y+2,R30
0000a6 83eb      	STD  Y+3,R30
0000a7 83ec      	STD  Y+4,R30
0000a8 83ed      	STD  Y+5,R30
                 ;	i -> R16,R17
                 ;	key -> R18,R19
                 ;	n -> Y+0
                 ;	degree -> R20,R21
                +
0000a9 e000     +LDI R16 , LOW ( 0 )
0000aa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000ab e0ef      	LDI  R30,LOW(15)
0000ac bbe4      	OUT  0x14,R30
                 ; 0000 0015 DDRD=0xFF;
0000ad efef      	LDI  R30,LOW(255)
0000ae bbe1      	OUT  0x11,R30
                 ; 0000 0016 PORTC=0xF0;
0000af efe0      	LDI  R30,LOW(240)
0000b0 bbe5      	OUT  0x15,R30
                 ; 0000 0017 
                 ; 0000 0018 lcd_init(16);
0000b1 e1a0      	LDI  R26,LOW(16)
0000b2 940e 024b 	CALL _lcd_init
                 ; 0000 0019 
                 ; 0000 001A while (1)
                 _0x3:
                 ; 0000 001B 
                 ; 0000 001C       {
                 ; 0000 001D       while(i<3){
                 _0x6:
                +
0000b4 3003     +CPI R16 , LOW ( 3 )
0000b5 e0e0     +LDI R30 , HIGH ( 3 )
0000b6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0000b7 f4c4      	BRGE _0x8
                 ; 0000 001E 
                 ; 0000 001F         do
                 _0xA:
                 ; 0000 0020             key = Press_key();
0000b8 d04e      	RCALL _Press_key
0000b9 019f      	MOVW R18,R30
                 ; 0000 0021             while(key==16);
0000ba e1e0      	LDI  R30,LOW(16)
0000bb e0f0      	LDI  R31,HIGH(16)
0000bc 17e2      	CP   R30,R18
0000bd 07f3      	CPC  R31,R19
0000be f3c9      	BREQ _0xA
                 ; 0000 0022              n[i]=key;
0000bf 01f8      	MOVW R30,R16
0000c0 01de      	MOVW R26,R28
0000c1 0fee      	LSL  R30
0000c2 1fff      	ROL  R31
0000c3 0fea      	ADD  R30,R26
0000c4 1ffb      	ADC  R31,R27
0000c5 8320      	ST   Z,R18
0000c6 8331      	STD  Z+1,R19
                 ; 0000 0023             Display_key(key);
0000c7 01d9      	MOVW R26,R18
0000c8 d0a1      	RCALL _Display_key
                 ; 0000 0024             delay_ms(350);
0000c9 e5ae      	LDI  R26,LOW(350)
0000ca e0b1      	LDI  R27,HIGH(350)
0000cb 940e 028a 	CALL _delay_ms
                 ; 0000 0025             i++;
                +
0000cd 5f0f     +SUBI R16 , LOW ( - 1 )
0000ce 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0026             }
0000cf cfe4      	RJMP _0x6
                 _0x8:
                 ; 0000 0027 
                 ; 0000 0028        degree=(n[0]*100)+(n[1]*10)+n[2];
0000d0 81e8      	LD   R30,Y
0000d1 81f9      	LDD  R31,Y+1
0000d2 e6a4      	LDI  R26,LOW(100)
0000d3 e0b0      	LDI  R27,HIGH(100)
0000d4 940e 034f 	CALL __MULW12
0000d6 01bf      	MOVW R22,R30
0000d7 81ea      	LDD  R30,Y+2
0000d8 81fb      	LDD  R31,Y+2+1
0000d9 e0aa      	LDI  R26,LOW(10)
0000da e0b0      	LDI  R27,HIGH(10)
0000db 940e 034f 	CALL __MULW12
0000dd 0fe6      	ADD  R30,R22
0000de 1ff7      	ADC  R31,R23
0000df 81ac      	LDD  R26,Y+4
0000e0 81bd      	LDD  R27,Y+4+1
0000e1 0fea      	ADD  R30,R26
0000e2 1ffb      	ADC  R31,R27
0000e3 01af      	MOVW R20,R30
                 ; 0000 0029 
                 ; 0000 002A        degree/=7.2;
0000e4 940e 0342 	CALL __CWD1
0000e6 940e 02c3 	CALL __CDF1
0000e8 01df      	MOVW R26,R30
0000e9 01cb      	MOVW R24,R22
                +
0000ea e6e6     +LDI R30 , LOW ( 0x40E66666 )
0000eb e6f6     +LDI R31 , HIGH ( 0x40E66666 )
0000ec ee66     +LDI R22 , BYTE3 ( 0x40E66666 )
0000ed e470     +LDI R23 , BYTE4 ( 0x40E66666 )
                 	__GETD1N 0x40E66666
0000ee 940e 02f1 	CALL __DIVF21
0000f0 01af      	MOVW R20,R30
                 ; 0000 002B 
                 ; 0000 002C        for(i=0;i<degree;i++)
                +
0000f1 e000     +LDI R16 , LOW ( 0 )
0000f2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xD:
                +
0000f3 1704     +CP R16 , R20
0000f4 0715     +CPC R17 , R21
                 	__CPWRR 16,17,20,21
0000f5 f47c      	BRGE _0xE
                 ; 0000 002D 		{
                 ; 0000 002E 			PORTD = 0x09;
0000f6 e0e9      	LDI  R30,LOW(9)
0000f7 940e 0278 	CALL SUBOPT_0x0
                 ; 0000 002F 			delay_ms(100);
                 ; 0000 0030 			PORTD = 0x03;
0000f9 e0e3      	LDI  R30,LOW(3)
0000fa 940e 0278 	CALL SUBOPT_0x0
                 ; 0000 0031 			delay_ms(100);
                 ; 0000 0032 			PORTD = 0x06;
0000fc e0e6      	LDI  R30,LOW(6)
0000fd 940e 0278 	CALL SUBOPT_0x0
                 ; 0000 0033 			delay_ms(100);
                 ; 0000 0034 			PORTD = 0x0C;
0000ff e0ec      	LDI  R30,LOW(12)
000100 940e 0278 	CALL SUBOPT_0x0
                 ; 0000 0035 			delay_ms(100);
                 ; 0000 0036 		}
                +
000102 5f0f     +SUBI R16 , LOW ( - 1 )
000103 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000104 cfee      	RJMP _0xD
                 _0xE:
                 ; 0000 0037 
                 ; 0000 0038 };
000105 cfae      	RJMP _0x3
                 ; 0000 0039 }
                 _0xF:
000106 cfff      	RJMP _0xF
                 ; .FEND
                 ;
                 ;int Press_key(void)
                 ; 0000 003C {
                 _Press_key:
                 ; .FSTART _Press_key
                 ; 0000 003D     PORTC.0=0; PORTC.1=1; PORTC.2=1; PORTC.3=1;
000107 98a8      	CBI  0x15,0
000108 9aa9      	SBI  0x15,1
000109 9aaa      	SBI  0x15,2
00010a 9aab      	SBI  0x15,3
                 ; 0000 003E     if(!PINC.4) return 1;
00010b 999c      	SBIC 0x13,4
00010c c003      	RJMP _0x18
00010d e0e1      	LDI  R30,LOW(1)
00010e e0f0      	LDI  R31,HIGH(1)
00010f 9508      	RET
                 ; 0000 003F     if(!PINC.5) return 2;
                 _0x18:
000110 999d      	SBIC 0x13,5
000111 c003      	RJMP _0x19
000112 e0e2      	LDI  R30,LOW(2)
000113 e0f0      	LDI  R31,HIGH(2)
000114 9508      	RET
                 ; 0000 0040     if(!PINC.6) return 3;
                 _0x19:
000115 999e      	SBIC 0x13,6
000116 c003      	RJMP _0x1A
000117 e0e3      	LDI  R30,LOW(3)
000118 e0f0      	LDI  R31,HIGH(3)
000119 9508      	RET
                 ; 0000 0041     if(!PINC.7) return 10;
                 _0x1A:
00011a 999f      	SBIC 0x13,7
00011b c003      	RJMP _0x1B
00011c e0ea      	LDI  R30,LOW(10)
00011d e0f0      	LDI  R31,HIGH(10)
00011e 9508      	RET
                 ; 0000 0042     PORTC.0=1; PORTC.1=0; PORTC.2=1; PORTC.3=1;
                 _0x1B:
00011f 9aa8      	SBI  0x15,0
000120 98a9      	CBI  0x15,1
000121 9aaa      	SBI  0x15,2
000122 9aab      	SBI  0x15,3
                 ; 0000 0043     if(!PINC.4) return 4;
000123 999c      	SBIC 0x13,4
000124 c003      	RJMP _0x24
000125 e0e4      	LDI  R30,LOW(4)
000126 e0f0      	LDI  R31,HIGH(4)
000127 9508      	RET
                 ; 0000 0044     if(!PINC.5) return 5;
                 _0x24:
000128 999d      	SBIC 0x13,5
000129 c003      	RJMP _0x25
00012a e0e5      	LDI  R30,LOW(5)
00012b e0f0      	LDI  R31,HIGH(5)
00012c 9508      	RET
                 ; 0000 0045     if(!PINC.6) return 6;
                 _0x25:
00012d 999e      	SBIC 0x13,6
00012e c003      	RJMP _0x26
00012f e0e6      	LDI  R30,LOW(6)
000130 e0f0      	LDI  R31,HIGH(6)
000131 9508      	RET
                 ; 0000 0046     if(!PINC.7) return 11;
                 _0x26:
000132 999f      	SBIC 0x13,7
000133 c003      	RJMP _0x27
000134 e0eb      	LDI  R30,LOW(11)
000135 e0f0      	LDI  R31,HIGH(11)
000136 9508      	RET
                 ; 0000 0047     PORTC.0=1; PORTD.1=1; PORTC.2=0; PORTC.3=1;
                 _0x27:
000137 9aa8      	SBI  0x15,0
000138 9a91      	SBI  0x12,1
000139 98aa      	CBI  0x15,2
00013a 9aab      	SBI  0x15,3
                 ; 0000 0048     if(!PINC.4) return 7;
00013b 999c      	SBIC 0x13,4
00013c c003      	RJMP _0x30
00013d e0e7      	LDI  R30,LOW(7)
00013e e0f0      	LDI  R31,HIGH(7)
00013f 9508      	RET
                 ; 0000 0049     if(!PINC.5) return 8;
                 _0x30:
000140 999d      	SBIC 0x13,5
000141 c003      	RJMP _0x31
000142 e0e8      	LDI  R30,LOW(8)
000143 e0f0      	LDI  R31,HIGH(8)
000144 9508      	RET
                 ; 0000 004A     if(!PINC.6) return 9;
                 _0x31:
000145 999e      	SBIC 0x13,6
000146 c003      	RJMP _0x32
000147 e0e9      	LDI  R30,LOW(9)
000148 e0f0      	LDI  R31,HIGH(9)
000149 9508      	RET
                 ; 0000 004B     if(!PINC.7) return 12;
                 _0x32:
00014a 999f      	SBIC 0x13,7
00014b c003      	RJMP _0x33
00014c e0ec      	LDI  R30,LOW(12)
00014d e0f0      	LDI  R31,HIGH(12)
00014e 9508      	RET
                 ; 0000 004C     PORTC.0=1; PORTC.1=1; PORTC.2=1; PORTC.3=0;
                 _0x33:
00014f 9aa8      	SBI  0x15,0
000150 9aa9      	SBI  0x15,1
000151 9aaa      	SBI  0x15,2
000152 98ab      	CBI  0x15,3
                 ; 0000 004D     if(!PINC.4) return 15;
000153 999c      	SBIC 0x13,4
000154 c003      	RJMP _0x3C
000155 e0ef      	LDI  R30,LOW(15)
000156 e0f0      	LDI  R31,HIGH(15)
000157 9508      	RET
                 ; 0000 004E     if(!PINC.5) return 0;
                 _0x3C:
000158 999d      	SBIC 0x13,5
000159 c003      	RJMP _0x3D
00015a e0e0      	LDI  R30,LOW(0)
00015b e0f0      	LDI  R31,HIGH(0)
00015c 9508      	RET
                 ; 0000 004F     if(!PINC.6) return 14;
                 _0x3D:
00015d 999e      	SBIC 0x13,6
00015e c003      	RJMP _0x3E
00015f e0ee      	LDI  R30,LOW(14)
000160 e0f0      	LDI  R31,HIGH(14)
000161 9508      	RET
                 ; 0000 0050     if(!PINC.7) return 13;
                 _0x3E:
000162 999f      	SBIC 0x13,7
000163 c003      	RJMP _0x3F
000164 e0ed      	LDI  R30,LOW(13)
000165 e0f0      	LDI  R31,HIGH(13)
000166 9508      	RET
                 ; 0000 0051     return 16;
                 _0x3F:
000167 e1e0      	LDI  R30,LOW(16)
000168 e0f0      	LDI  R31,HIGH(16)
000169 9508      	RET
                 ; 0000 0052 }
                 ; .FEND
                 ;
                 ;void Display_key(int key)
                 ; 0000 0055 {
                 _Display_key:
                 ; .FSTART _Display_key
                 ; 0000 0056     if(key==0)  lcd_puts("0");
00016a 93ba      	ST   -Y,R27
00016b 93aa      	ST   -Y,R26
                 ;	key -> Y+0
00016c 81e8      	LD   R30,Y
00016d 81f9      	LDD  R31,Y+1
00016e 9730      	SBIW R30,0
00016f f421      	BRNE _0x40
                +
000170 e6a0     +LDI R26 , LOW ( _0x41 + ( 0 ) )
000171 e0b2     +LDI R27 , HIGH ( _0x41 + ( 0 ) )
                 	__POINTW2MN _0x41,0
000172 940e 023a 	CALL _lcd_puts
                 ; 0000 0057     if(key==1)  lcd_puts("7");
                 _0x40:
000174 81a8      	LD   R26,Y
000175 81b9      	LDD  R27,Y+1
000176 9711      	SBIW R26,1
000177 f421      	BRNE _0x42
                +
000178 e6a2     +LDI R26 , LOW ( _0x41 + ( 2 ) )
000179 e0b2     +LDI R27 , HIGH ( _0x41 + ( 2 ) )
                 	__POINTW2MN _0x41,2
00017a 940e 023a 	CALL _lcd_puts
                 ; 0000 0058     if(key==2)  lcd_puts("8");
                 _0x42:
00017c 81a8      	LD   R26,Y
00017d 81b9      	LDD  R27,Y+1
00017e 9712      	SBIW R26,2
00017f f421      	BRNE _0x43
                +
000180 e6a4     +LDI R26 , LOW ( _0x41 + ( 4 ) )
000181 e0b2     +LDI R27 , HIGH ( _0x41 + ( 4 ) )
                 	__POINTW2MN _0x41,4
000182 940e 023a 	CALL _lcd_puts
                 ; 0000 0059     if(key==3)  lcd_puts("9");
                 _0x43:
000184 81a8      	LD   R26,Y
000185 81b9      	LDD  R27,Y+1
000186 9713      	SBIW R26,3
000187 f421      	BRNE _0x44
                +
000188 e6a6     +LDI R26 , LOW ( _0x41 + ( 6 ) )
000189 e0b2     +LDI R27 , HIGH ( _0x41 + ( 6 ) )
                 	__POINTW2MN _0x41,6
00018a 940e 023a 	CALL _lcd_puts
                 ; 0000 005A     if(key==4)  lcd_puts("4");
                 _0x44:
00018c 81a8      	LD   R26,Y
00018d 81b9      	LDD  R27,Y+1
00018e 9714      	SBIW R26,4
00018f f421      	BRNE _0x45
                +
000190 e6a8     +LDI R26 , LOW ( _0x41 + ( 8 ) )
000191 e0b2     +LDI R27 , HIGH ( _0x41 + ( 8 ) )
                 	__POINTW2MN _0x41,8
000192 940e 023a 	CALL _lcd_puts
                 ; 0000 005B     if(key==5)  lcd_puts("5");
                 _0x45:
000194 81a8      	LD   R26,Y
000195 81b9      	LDD  R27,Y+1
000196 9715      	SBIW R26,5
000197 f421      	BRNE _0x46
                +
000198 e6aa     +LDI R26 , LOW ( _0x41 + ( 10 ) )
000199 e0b2     +LDI R27 , HIGH ( _0x41 + ( 10 ) )
                 	__POINTW2MN _0x41,10
00019a 940e 023a 	CALL _lcd_puts
                 ; 0000 005C     if(key==6)  lcd_puts("6");
                 _0x46:
00019c 81a8      	LD   R26,Y
00019d 81b9      	LDD  R27,Y+1
00019e 9716      	SBIW R26,6
00019f f421      	BRNE _0x47
                +
0001a0 e6ac     +LDI R26 , LOW ( _0x41 + ( 12 ) )
0001a1 e0b2     +LDI R27 , HIGH ( _0x41 + ( 12 ) )
                 	__POINTW2MN _0x41,12
0001a2 940e 023a 	CALL _lcd_puts
                 ; 0000 005D     if(key==7)  lcd_puts("1");
                 _0x47:
0001a4 81a8      	LD   R26,Y
0001a5 81b9      	LDD  R27,Y+1
0001a6 9717      	SBIW R26,7
0001a7 f421      	BRNE _0x48
                +
0001a8 e6ae     +LDI R26 , LOW ( _0x41 + ( 14 ) )
0001a9 e0b2     +LDI R27 , HIGH ( _0x41 + ( 14 ) )
                 	__POINTW2MN _0x41,14
0001aa 940e 023a 	CALL _lcd_puts
                 ; 0000 005E     if(key==8)  lcd_puts("2");
                 _0x48:
0001ac 81a8      	LD   R26,Y
0001ad 81b9      	LDD  R27,Y+1
0001ae 9718      	SBIW R26,8
0001af f421      	BRNE _0x49
                +
0001b0 e7a0     +LDI R26 , LOW ( _0x41 + ( 16 ) )
0001b1 e0b2     +LDI R27 , HIGH ( _0x41 + ( 16 ) )
                 	__POINTW2MN _0x41,16
0001b2 940e 023a 	CALL _lcd_puts
                 ; 0000 005F     if(key==9)  lcd_puts("3");
                 _0x49:
0001b4 81a8      	LD   R26,Y
0001b5 81b9      	LDD  R27,Y+1
0001b6 9719      	SBIW R26,9
0001b7 f421      	BRNE _0x4A
                +
0001b8 e7a2     +LDI R26 , LOW ( _0x41 + ( 18 ) )
0001b9 e0b2     +LDI R27 , HIGH ( _0x41 + ( 18 ) )
                 	__POINTW2MN _0x41,18
0001ba 940e 023a 	CALL _lcd_puts
                 ; 0000 0060     if(key==10) lcd_puts("/");
                 _0x4A:
0001bc 81a8      	LD   R26,Y
0001bd 81b9      	LDD  R27,Y+1
0001be 971a      	SBIW R26,10
0001bf f421      	BRNE _0x4B
                +
0001c0 e7a4     +LDI R26 , LOW ( _0x41 + ( 20 ) )
0001c1 e0b2     +LDI R27 , HIGH ( _0x41 + ( 20 ) )
                 	__POINTW2MN _0x41,20
0001c2 940e 023a 	CALL _lcd_puts
                 ; 0000 0061     if(key==11) lcd_puts("*");
                 _0x4B:
0001c4 81a8      	LD   R26,Y
0001c5 81b9      	LDD  R27,Y+1
0001c6 971b      	SBIW R26,11
0001c7 f421      	BRNE _0x4C
                +
0001c8 e7a6     +LDI R26 , LOW ( _0x41 + ( 22 ) )
0001c9 e0b2     +LDI R27 , HIGH ( _0x41 + ( 22 ) )
                 	__POINTW2MN _0x41,22
0001ca 940e 023a 	CALL _lcd_puts
                 ; 0000 0062     if(key==12) lcd_puts("+");
                 _0x4C:
0001cc 81a8      	LD   R26,Y
0001cd 81b9      	LDD  R27,Y+1
0001ce 971c      	SBIW R26,12
0001cf f421      	BRNE _0x4D
                +
0001d0 e7a8     +LDI R26 , LOW ( _0x41 + ( 24 ) )
0001d1 e0b2     +LDI R27 , HIGH ( _0x41 + ( 24 ) )
                 	__POINTW2MN _0x41,24
0001d2 940e 023a 	CALL _lcd_puts
                 ; 0000 0063     if(key==13) lcd_puts("-");
                 _0x4D:
0001d4 81a8      	LD   R26,Y
0001d5 81b9      	LDD  R27,Y+1
0001d6 971d      	SBIW R26,13
0001d7 f421      	BRNE _0x4E
                +
0001d8 e7aa     +LDI R26 , LOW ( _0x41 + ( 26 ) )
0001d9 e0b2     +LDI R27 , HIGH ( _0x41 + ( 26 ) )
                 	__POINTW2MN _0x41,26
0001da 940e 023a 	CALL _lcd_puts
                 ; 0000 0064     if(key==14) lcd_puts("=");
                 _0x4E:
0001dc 81a8      	LD   R26,Y
0001dd 81b9      	LDD  R27,Y+1
0001de 971e      	SBIW R26,14
0001df f421      	BRNE _0x4F
                +
0001e0 e7ac     +LDI R26 , LOW ( _0x41 + ( 28 ) )
0001e1 e0b2     +LDI R27 , HIGH ( _0x41 + ( 28 ) )
                 	__POINTW2MN _0x41,28
0001e2 940e 023a 	CALL _lcd_puts
                 ; 0000 0065     if(key==15) lcd_clear();
                 _0x4F:
0001e4 81a8      	LD   R26,Y
0001e5 81b9      	LDD  R27,Y+1
0001e6 971f      	SBIW R26,15
0001e7 f411      	BRNE _0x50
0001e8 940e 0219 	CALL _lcd_clear
                 ; 0000 0066 }
                 _0x50:
0001ea 940c 0217 	JMP  _0x2080002
                 ; .FEND
                 
                 	.DSEG
                 _0x41:
000260           	.BYTE 0x1E
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001ec 93aa      	ST   -Y,R26
0001ed b3eb      	IN   R30,0x1B
0001ee 70ef      	ANDI R30,LOW(0xF)
0001ef 2fae      	MOV  R26,R30
0001f0 81e8      	LD   R30,Y
0001f1 7fe0      	ANDI R30,LOW(0xF0)
0001f2 2bea      	OR   R30,R26
0001f3 bbeb      	OUT  0x1B,R30
                +
0001f4 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001f5 958a     +DEC R24
0001f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001f7 9ada      	SBI  0x1B,2
                +
0001f8 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001f9 958a     +DEC R24
0001fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001fb 98da      	CBI  0x1B,2
                +
0001fc e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001fd 958a     +DEC R24
0001fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001ff c076      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000200 93aa      	ST   -Y,R26
000201 81a8      	LD   R26,Y
000202 dfe9      	RCALL __lcd_write_nibble_G101
000203 81e8          ld    r30,y
000204 95e2          swap  r30
000205 83e8          st    y,r30
000206 81a8      	LD   R26,Y
000207 dfe4      	RCALL __lcd_write_nibble_G101
                +
000208 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
000209 958a     +DEC R24
00020a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
00020b c06a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00020c 93aa      	ST   -Y,R26
00020d 81e8      	LD   R30,Y
00020e e0f0      	LDI  R31,0
00020f 58e2      	SUBI R30,LOW(-__base_y_G101)
000210 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000211 81e0      	LD   R30,Z
000212 81a9      	LDD  R26,Y+1
000213 0fae      	ADD  R26,R30
000214 dfeb      	RCALL __lcd_write_data
000215 8059      	LDD  R5,Y+1
000216 8048      	LDD  R4,Y+0
                 _0x2080002:
000217 9622      	ADIW R28,2
000218 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000219 e0a2      	LDI  R26,LOW(2)
00021a 940e 027d 	CALL SUBOPT_0x1
00021c e0ac      	LDI  R26,LOW(12)
00021d dfe2      	RCALL __lcd_write_data
00021e e0a1      	LDI  R26,LOW(1)
00021f 940e 027d 	CALL SUBOPT_0x1
000221 e0e0      	LDI  R30,LOW(0)
000222 2e4e      	MOV  R4,R30
000223 2e5e      	MOV  R5,R30
000224 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000225 93aa      	ST   -Y,R26
000226 81a8      	LD   R26,Y
000227 30aa      	CPI  R26,LOW(0xA)
000228 f011      	BREQ _0x2020005
000229 1457      	CP   R5,R7
00022a f048      	BRLO _0x2020004
                 _0x2020005:
00022b e0e0      	LDI  R30,LOW(0)
00022c 93ea      	ST   -Y,R30
00022d 9443      	INC  R4
00022e 2da4      	MOV  R26,R4
00022f dfdc      	RCALL _lcd_gotoxy
000230 81a8      	LD   R26,Y
000231 30aa      	CPI  R26,LOW(0xA)
000232 f409      	BRNE _0x2020007
000233 c042      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000234 9453      	INC  R5
000235 9ad8      	SBI  0x1B,0
000236 81a8      	LD   R26,Y
000237 dfc8      	RCALL __lcd_write_data
000238 98d8      	CBI  0x1B,0
000239 c03c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00023a 93ba      	ST   -Y,R27
00023b 93aa      	ST   -Y,R26
00023c 931a      	ST   -Y,R17
                 _0x2020008:
00023d 81a9      	LDD  R26,Y+1
00023e 81ba      	LDD  R27,Y+1+1
00023f 91ed      	LD   R30,X+
000240 83a9      	STD  Y+1,R26
000241 83ba      	STD  Y+1+1,R27
000242 2f1e      	MOV  R17,R30
000243 30e0      	CPI  R30,0
000244 f019      	BREQ _0x202000A
000245 2fa1      	MOV  R26,R17
000246 dfde      	RCALL _lcd_putchar
000247 cff5      	RJMP _0x2020008
                 _0x202000A:
000248 8118      	LDD  R17,Y+0
000249 9623      	ADIW R28,3
00024a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00024b 93aa      	ST   -Y,R26
00024c b3ea      	IN   R30,0x1A
00024d 6fe0      	ORI  R30,LOW(0xF0)
00024e bbea      	OUT  0x1A,R30
00024f 9ad2      	SBI  0x1A,2
000250 9ad0      	SBI  0x1A,0
000251 9ad1      	SBI  0x1A,1
000252 98da      	CBI  0x1B,2
000253 98d8      	CBI  0x1B,0
000254 98d9      	CBI  0x1B,1
000255 8078      	LDD  R7,Y+0
000256 81e8      	LD   R30,Y
000257 58e0      	SUBI R30,-LOW(128)
                +
000258 93e0 0280+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00025a 81e8      	LD   R30,Y
00025b 54e0      	SUBI R30,-LOW(192)
                +
00025c 93e0 0281+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00025e e1a4      	LDI  R26,LOW(20)
00025f e0b0      	LDI  R27,0
000260 940e 028a 	CALL _delay_ms
000262 940e 0283 	CALL SUBOPT_0x2
000264 940e 0283 	CALL SUBOPT_0x2
000266 940e 0283 	CALL SUBOPT_0x2
000268 e2a0      	LDI  R26,LOW(32)
000269 df82      	RCALL __lcd_write_nibble_G101
                +
00026a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00026b 958a     +DEC R24
00026c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00026d e2a8      	LDI  R26,LOW(40)
00026e df91      	RCALL __lcd_write_data
00026f e0a4      	LDI  R26,LOW(4)
000270 df8f      	RCALL __lcd_write_data
000271 e8a5      	LDI  R26,LOW(133)
000272 df8d      	RCALL __lcd_write_data
000273 e0a6      	LDI  R26,LOW(6)
000274 df8b      	RCALL __lcd_write_data
000275 dfa3      	RCALL _lcd_clear
                 _0x2080001:
000276 9621      	ADIW R28,1
000277 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
00027e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000278 bbe2      	OUT  0x12,R30
000279 e6a4      	LDI  R26,LOW(100)
00027a e0b0      	LDI  R27,0
00027b 940c 028a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00027d 940e 0200 	CALL __lcd_write_data
00027f e0a3      	LDI  R26,LOW(3)
000280 e0b0      	LDI  R27,0
000281 940c 028a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000283 e3a0      	LDI  R26,LOW(48)
000284 940e 01ec 	CALL __lcd_write_nibble_G101
                +
000286 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000287 958a     +DEC R24
000288 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000289 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00028a 9610      	adiw r26,0
00028b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00028c ee88     +LDI R24 , LOW ( 0x3E8 )
00028d e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00028e 9701     +SBIW R24 , 1
00028f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000290 95a8      	wdr
000291 9711      	sbiw r26,1
000292 f7c9      	brne __delay_ms0
                 __delay_ms1:
000293 9508      	ret
                 
                 __ROUND_REPACK:
000294 2355      	TST  R21
000295 f442      	BRPL __REPACK
000296 3850      	CPI  R21,0x80
000297 f411      	BRNE __ROUND_REPACK0
000298 ffe0      	SBRS R30,0
000299 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00029a 9631      	ADIW R30,1
00029b 1f69      	ADC  R22,R25
00029c 1f79      	ADC  R23,R25
00029d f06b      	BRVS __REPACK1
                 
                 __REPACK:
00029e e850      	LDI  R21,0x80
00029f 2757      	EOR  R21,R23
0002a0 f411      	BRNE __REPACK0
0002a1 935f      	PUSH R21
0002a2 c03c      	RJMP __ZERORES
                 __REPACK0:
0002a3 3f5f      	CPI  R21,0xFF
0002a4 f031      	BREQ __REPACK1
0002a5 0f66      	LSL  R22
0002a6 0c00      	LSL  R0
0002a7 9557      	ROR  R21
0002a8 9567      	ROR  R22
0002a9 2f75      	MOV  R23,R21
0002aa 9508      	RET
                 __REPACK1:
0002ab 935f      	PUSH R21
0002ac 2000      	TST  R0
0002ad f00a      	BRMI __REPACK2
0002ae c03c      	RJMP __MAXRES
                 __REPACK2:
0002af c035      	RJMP __MINRES
                 
                 __UNPACK:
0002b0 e850      	LDI  R21,0x80
0002b1 2e19      	MOV  R1,R25
0002b2 2215      	AND  R1,R21
0002b3 0f88      	LSL  R24
0002b4 1f99      	ROL  R25
0002b5 2795      	EOR  R25,R21
0002b6 0f55      	LSL  R21
0002b7 9587      	ROR  R24
                 
                 __UNPACK1:
0002b8 e850      	LDI  R21,0x80
0002b9 2e07      	MOV  R0,R23
0002ba 2205      	AND  R0,R21
0002bb 0f66      	LSL  R22
0002bc 1f77      	ROL  R23
0002bd 2775      	EOR  R23,R21
0002be 0f55      	LSL  R21
0002bf 9567      	ROR  R22
0002c0 9508      	RET
                 
                 __CDF1U:
0002c1 9468      	SET
0002c2 c001      	RJMP __CDF1U0
                 __CDF1:
0002c3 94e8      	CLT
                 __CDF1U0:
0002c4 9730      	SBIW R30,0
0002c5 4060      	SBCI R22,0
0002c6 4070      	SBCI R23,0
0002c7 f0b1      	BREQ __CDF10
0002c8 2400      	CLR  R0
0002c9 f026      	BRTS __CDF11
0002ca 2377      	TST  R23
0002cb f412      	BRPL __CDF11
0002cc 9400      	COM  R0
0002cd d06c      	RCALL __ANEGD1
                 __CDF11:
0002ce 2e17      	MOV  R1,R23
0002cf e17e      	LDI  R23,30
0002d0 2011      	TST  R1
                 __CDF12:
0002d1 f032      	BRMI __CDF13
0002d2 957a      	DEC  R23
0002d3 0fee      	LSL  R30
0002d4 1fff      	ROL  R31
0002d5 1f66      	ROL  R22
0002d6 1c11      	ROL  R1
0002d7 cff9      	RJMP __CDF12
                 __CDF13:
0002d8 2fef      	MOV  R30,R31
0002d9 2ff6      	MOV  R31,R22
0002da 2d61      	MOV  R22,R1
0002db 935f      	PUSH R21
0002dc dfc1      	RCALL __REPACK
0002dd 915f      	POP  R21
                 __CDF10:
0002de 9508      	RET
                 
                 __ZERORES:
0002df 27ee      	CLR  R30
0002e0 27ff      	CLR  R31
0002e1 2766      	CLR  R22
0002e2 2777      	CLR  R23
0002e3 915f      	POP  R21
0002e4 9508      	RET
                 
                 __MINRES:
0002e5 efef      	SER  R30
0002e6 efff      	SER  R31
0002e7 e76f      	LDI  R22,0x7F
0002e8 ef7f      	SER  R23
0002e9 915f      	POP  R21
0002ea 9508      	RET
                 
                 __MAXRES:
0002eb efef      	SER  R30
0002ec efff      	SER  R31
0002ed e76f      	LDI  R22,0x7F
0002ee e77f      	LDI  R23,0x7F
0002ef 915f      	POP  R21
0002f0 9508      	RET
                 
                 __DIVF21:
0002f1 935f      	PUSH R21
0002f2 dfbd      	RCALL __UNPACK
0002f3 3870      	CPI  R23,0x80
0002f4 f421      	BRNE __DIVF210
0002f5 2011      	TST  R1
                 __DIVF211:
0002f6 f40a      	BRPL __DIVF219
0002f7 cfed      	RJMP __MINRES
                 __DIVF219:
0002f8 cff2      	RJMP __MAXRES
                 __DIVF210:
0002f9 3890      	CPI  R25,0x80
0002fa f409      	BRNE __DIVF218
                 __DIVF217:
0002fb cfe3      	RJMP __ZERORES
                 __DIVF218:
0002fc 2401      	EOR  R0,R1
0002fd 9408      	SEC
0002fe 0b97      	SBC  R25,R23
0002ff f41b      	BRVC __DIVF216
000300 f3d4      	BRLT __DIVF217
000301 2000      	TST  R0
000302 cff3      	RJMP __DIVF211
                 __DIVF216:
000303 2f79      	MOV  R23,R25
000304 931f      	PUSH R17
000305 932f      	PUSH R18
000306 933f      	PUSH R19
000307 934f      	PUSH R20
000308 2411      	CLR  R1
000309 2711      	CLR  R17
00030a 2722      	CLR  R18
00030b 2733      	CLR  R19
00030c 2744      	CLR  R20
00030d 2755      	CLR  R21
00030e e290      	LDI  R25,32
                 __DIVF212:
00030f 17ae      	CP   R26,R30
000310 07bf      	CPC  R27,R31
000311 0786      	CPC  R24,R22
000312 0741      	CPC  R20,R17
000313 f030      	BRLO __DIVF213
000314 1bae      	SUB  R26,R30
000315 0bbf      	SBC  R27,R31
000316 0b86      	SBC  R24,R22
000317 0b41      	SBC  R20,R17
000318 9408      	SEC
000319 c001      	RJMP __DIVF214
                 __DIVF213:
00031a 9488      	CLC
                 __DIVF214:
00031b 1f55      	ROL  R21
00031c 1f22      	ROL  R18
00031d 1f33      	ROL  R19
00031e 1c11      	ROL  R1
00031f 1faa      	ROL  R26
000320 1fbb      	ROL  R27
000321 1f88      	ROL  R24
000322 1f44      	ROL  R20
000323 959a      	DEC  R25
000324 f751      	BRNE __DIVF212
000325 01f9      	MOVW R30,R18
000326 2d61      	MOV  R22,R1
000327 914f      	POP  R20
000328 913f      	POP  R19
000329 912f      	POP  R18
00032a 911f      	POP  R17
00032b 2366      	TST  R22
00032c f032      	BRMI __DIVF215
00032d 0f55      	LSL  R21
00032e 1fee      	ROL  R30
00032f 1fff      	ROL  R31
000330 1f66      	ROL  R22
000331 957a      	DEC  R23
000332 f243      	BRVS __DIVF217
                 __DIVF215:
000333 df60      	RCALL __ROUND_REPACK
000334 915f      	POP  R21
000335 9508      	RET
                 
                 __ANEGW1:
000336 95f1      	NEG  R31
000337 95e1      	NEG  R30
000338 40f0      	SBCI R31,0
000339 9508      	RET
                 
                 __ANEGD1:
00033a 95f0      	COM  R31
00033b 9560      	COM  R22
00033c 9570      	COM  R23
00033d 95e1      	NEG  R30
00033e 4fff      	SBCI R31,-1
00033f 4f6f      	SBCI R22,-1
000340 4f7f      	SBCI R23,-1
000341 9508      	RET
                 
                 __CWD1:
000342 2f6f      	MOV  R22,R31
000343 0f66      	ADD  R22,R22
000344 0b66      	SBC  R22,R22
000345 2f76      	MOV  R23,R22
000346 9508      	RET
                 
                 __MULW12U:
000347 9ffa      	MUL  R31,R26
000348 2df0      	MOV  R31,R0
000349 9feb      	MUL  R30,R27
00034a 0df0      	ADD  R31,R0
00034b 9fea      	MUL  R30,R26
00034c 2de0      	MOV  R30,R0
00034d 0df1      	ADD  R31,R1
00034e 9508      	RET
                 
                 __MULW12:
00034f d004      	RCALL __CHKSIGNW
000350 dff6      	RCALL __MULW12U
000351 f40e      	BRTC __MULW121
000352 dfe3      	RCALL __ANEGW1
                 __MULW121:
000353 9508      	RET
                 
                 __CHKSIGNW:
000354 94e8      	CLT
000355 fff7      	SBRS R31,7
000356 c002      	RJMP __CHKSW1
000357 dfde      	RCALL __ANEGW1
000358 9468      	SET
                 __CHKSW1:
000359 ffb7      	SBRS R27,7
00035a c006      	RJMP __CHKSW2
00035b 95a0      	COM  R26
00035c 95b0      	COM  R27
00035d 9611      	ADIW R26,1
00035e f800      	BLD  R0,0
00035f 9403      	INC  R0
000360 fa00      	BST  R0,0
                 __CHKSW2:
000361 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  18 r1 :  13 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  15 r18:   9 r19:   6 r20:   9 r21:  28 r22:  31 r23:  23 
r24:  27 r25:  13 r26: 101 r27:  51 r28:   6 r29:   1 r30: 116 r31:  51 
x  :   4 y  :  75 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   7 
adiw  :   6 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   3 brne  :  33 brpl  :   3 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  35 
cbi   :   9 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   6 
cp    :   4 cpc   :   6 cpi   :   8 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  25 ld    :  29 ldd   :  28 ldi   : 136 
lds   :   0 lpm   :   7 lsl   :   9 lsr   :   0 mov   :  19 movw  :  13 
mul   :   3 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :   1 out   :  12 pop   :   9 push  :   8 rcall :  23 ret   :  36 
reti  :   0 rjmp  :  39 rol   :  17 ror   :   4 sbc   :   5 sbci  :   9 
sbi   :  17 sbic  :  16 sbis  :   0 sbiw  :  23 sbr   :   0 sbrc  :   0 
sbrs  :   3 sec   :   2 seh   :   0 sei   :   0 sen   :   0 ser   :   5 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   8 sts   :   2 sub   :   1 subi  :   5 swap  :   1 
tst   :   7 wdr   :   1 
Instructions used: 69 out of 116 (59.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006c4   1584    148   1732   32768   5.3%
[.dseg] 0x000060 0x000282      0     34     34    2048   1.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
