;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;int sec1, sec2, min1, min2, hour1, hour2 = 0;
;
;int count = 0;
;
;unsigned char seg[]={0x3F ,0x06 ,0x5B ,0x4F , 0x66, 0x6D , 0x7D , 0x07 ,0x7F , 0x67};

	.DSEG
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E  count++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000F  if(count == 3921)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0010  {
; 0000 0011   count = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0012   sec1++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0013 
; 0000 0014   if(sec1 > 9){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0015     sec2++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0016     sec1=0;
;PCODE: $00000021 VOL: 0
; 0000 0017   }
; 0000 0018 
; 0000 0019   if(sec2 > 5){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001A     min1++;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001B     sec2=0;
;PCODE: $00000029 VOL: 0
; 0000 001C 
; 0000 001D   }
; 0000 001E 
; 0000 001F   if(min1 > 9){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0020    min2++;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0021    min1=0;
;PCODE: $00000031 VOL: 0
; 0000 0022   }
; 0000 0023 
; 0000 0024   if(min2 > 5){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0025    hour1++;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0026    min2=0;
;PCODE: $00000039 VOL: 0
; 0000 0027   }
; 0000 0028 
; 0000 0029   if (hour1 > 9){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002A    hour2++;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002B    hour1=0;
;PCODE: $00000042 VOL: 0
; 0000 002C   }
; 0000 002D 
; 0000 002E   if(hour1 == 4 && hour2 == 2){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002F    sec1=0;
;PCODE: $0000004E VOL: 0
; 0000 0030    sec2=0;
;PCODE: $0000004F VOL: 0
; 0000 0031    min1=0;
;PCODE: $00000050 VOL: 0
; 0000 0032    min2=0;
;PCODE: $00000051 VOL: 0
; 0000 0033    hour1=0;
;PCODE: $00000052 VOL: 0
; 0000 0034    hour2=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0035   }
; 0000 0036 
; 0000 0037  }
;PCODE: $00000055 VOL: 0
; 0000 0038 
; 0000 0039 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 003C {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D min1++;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003E if ( min1 > 9 )
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003F {
; 0000 0040 min2++ ;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0041 min1 = 0 ;
;PCODE: $00000065 VOL: 0
; 0000 0042 }
; 0000 0043 if( min2 == 5 & min1==9 ) {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0044 min2 = 0;
;PCODE: $00000070 VOL: 0
; 0000 0045 min1 = 0; }
;PCODE: $00000071 VOL: 0
; 0000 0046 }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0049 {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004A hour1++;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004B if ( hour1 > 9 )
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004C {
; 0000 004D hour2++ ;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 004E hour1 = 0 ;
;PCODE: $00000082 VOL: 0
; 0000 004F }
; 0000 0050 if( hour2 == 2 & hour1==4 ) {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0051 hour2 = 0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0052 hour1 = 0; }
;PCODE: $0000008F VOL: 0
; 0000 0053 
; 0000 0054 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;void main(void)
; 0000 0057 {
;PCODE: $00000094 VOL: 0
; 0000 0058 
; 0000 0059 DDRB=0xFF;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 005A DDRC=0x3F;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 005B 
; 0000 005C TCNT2=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 005D OCR2=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005E TCCR2=0x01;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005F ASSR=0<<AS2;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0060 TIMSK=0x40;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0061 
; 0000 0062 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0063 
; 0000 0064 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0065 #asm ("sei");
;PCODE: $000000A8 VOL: 0
	sei
;PCODE: $000000A9 VOL: 0
; 0000 0066 
; 0000 0067 while (1)
;PCODE: $000000AA VOL: 0
; 0000 0068     {
; 0000 0069      PORTC=0x2F;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006A      PORTB=seg[sec2];
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006B      delay_ms(3);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 006C 
; 0000 006D      PORTC=0x1F;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 006E      PORTB=seg[sec1];
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 006F      delay_ms(3);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0070 
; 0000 0071      PORTC=0x3B;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0072      PORTB=seg[min2];
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0073      delay_ms(3);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0074 
; 0000 0075      PORTC=0x37;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0076      PORTB=seg[min1];
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0077      delay_ms(3);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0078 
; 0000 0079      PORTC=0x3E;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 007A      PORTB=seg[hour2];
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 007B      delay_ms(3);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 007C 
; 0000 007D      PORTC=0x3D;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007E      PORTB=seg[hour1];
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 007F      delay_ms(3);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0080     }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0081 }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
