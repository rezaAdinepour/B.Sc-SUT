
AVRASM ver. 2.1.30  E:\University\Electerical\MicroProcessor\Dr Khosravi\HW\Simulation\HW05\SimulationHW05_Reza adinepour\Code\Test\TX\Code\C\TX\Debug\List\uP_SimulationHW05_TX.asm Mon Dec 06 13:58:57 2021

E:\University\Electerical\MicroProcessor\Dr Khosravi\HW\Simulation\HW05\SimulationHW05_Reza adinepour\Code\Test\TX\Code\C\TX\Debug\List\uP_SimulationHW05_TX.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\University\Electerical\MicroProcessor\Dr Khosravi\HW\Simulation\HW05\SimulationHW05_Reza adinepour\Code\Test\TX\Code\C\TX\Debug\List\uP_SimulationHW05_TX.asm(1089): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF _flag=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0065 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
E:\University\Electerical\MicroProcessor\Dr Khosravi\HW\Simulation\HW05\SimulationHW05_Reza adinepour\Code\Test\TX\Code\C\TX\Debug\List\uP_SimulationHW05_TX.asm(1128): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 
                 __GLOBAL_INI_TBL:
000034 0001      	.DW  0x01
000035 0004      	.DW  0x04
000036 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 0111 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;
                 ;unsigned char code[17], i, flag = 0;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000065 920a      	ST   -Y,R0
000066 921a      	ST   -Y,R1
000067 92fa      	ST   -Y,R15
000068 936a      	ST   -Y,R22
000069 937a      	ST   -Y,R23
00006a 938a      	ST   -Y,R24
00006b 939a      	ST   -Y,R25
00006c 93aa      	ST   -Y,R26
00006d 93ba      	ST   -Y,R27
00006e 93ea      	ST   -Y,R30
00006f 93fa      	ST   -Y,R31
000070 b7ef      	IN   R30,SREG
000071 93ea      	ST   -Y,R30
                 ; 0000 000D     if(flag == 0)
000072 2044      	TST  R4
000073 f009      	BREQ PC+2
000074 c08e      	RJMP _0x3
                 ; 0000 000E     {
                 ; 0000 000F         code[i] = PINA & 0x0f;
000075 2da5      	MOV  R26,R5
000076 e0b0      	LDI  R27,0
000077 5aa0      	SUBI R26,LOW(-_code)
000078 4fbd      	SBCI R27,HIGH(-_code)
000079 b3e9      	IN   R30,0x19
00007a 70ef      	ANDI R30,LOW(0xF)
00007b 93ec      	ST   X,R30
                 ; 0000 0010         switch(code[i])
00007c 940e 0139 	CALL SUBOPT_0x0
00007e 81e0      	LD   R30,Z
00007f e0f0      	LDI  R31,0
                 ; 0000 0011         {
                 ; 0000 0012             case 0:
000080 9730      	SBIW R30,0
000081 f421      	BRNE _0x7
                 ; 0000 0013                 code[i] = 7;
000082 940e 0139 	CALL SUBOPT_0x0
000084 e0a7      	LDI  R26,LOW(7)
000085 c077      	RJMP _0x1C
                 ; 0000 0014                 //lcd_putchar('7');
                 ; 0000 0015                 putchar(code[i]);
                 ; 0000 0016             break;
                 ; 0000 0017             case 1:
                 _0x7:
000086 30e1      	CPI  R30,LOW(0x1)
000087 e0a0      	LDI  R26,HIGH(0x1)
000088 07fa      	CPC  R31,R26
000089 f421      	BRNE _0x8
                 ; 0000 0018                 code[i] = 4;
00008a 940e 0139 	CALL SUBOPT_0x0
00008c e0a4      	LDI  R26,LOW(4)
00008d c06f      	RJMP _0x1C
                 ; 0000 0019                 //lcd_putchar('4');
                 ; 0000 001A                 putchar(code[i]);
                 ; 0000 001B             break;
                 ; 0000 001C             case 2:
                 _0x8:
00008e 30e2      	CPI  R30,LOW(0x2)
00008f e0a0      	LDI  R26,HIGH(0x2)
000090 07fa      	CPC  R31,R26
000091 f421      	BRNE _0x9
                 ; 0000 001D                 code[i] = 1;
000092 940e 0139 	CALL SUBOPT_0x0
000094 e0a1      	LDI  R26,LOW(1)
000095 c067      	RJMP _0x1C
                 ; 0000 001E                 //lcd_putchar('1');
                 ; 0000 001F                 putchar(code[i]);
                 ; 0000 0020             break;
                 ; 0000 0021             case 3:
                 _0x9:
000096 30e3      	CPI  R30,LOW(0x3)
000097 e0a0      	LDI  R26,HIGH(0x3)
000098 07fa      	CPC  R31,R26
000099 f421      	BRNE _0xA
                 ; 0000 0022                 code[i] = 'F';
00009a 940e 0139 	CALL SUBOPT_0x0
00009c e4a6      	LDI  R26,LOW(70)
00009d c05f      	RJMP _0x1C
                 ; 0000 0023                 //lcd_putchar('F');
                 ; 0000 0024                 putchar(code[i]);
                 ; 0000 0025             break;
                 ; 0000 0026             case 4:
                 _0xA:
00009e 30e4      	CPI  R30,LOW(0x4)
00009f e0a0      	LDI  R26,HIGH(0x4)
0000a0 07fa      	CPC  R31,R26
0000a1 f421      	BRNE _0xB
                 ; 0000 0027                 code[i] = 8;
0000a2 940e 0139 	CALL SUBOPT_0x0
0000a4 e0a8      	LDI  R26,LOW(8)
0000a5 c057      	RJMP _0x1C
                 ; 0000 0028                 //lcd_putchar('8');
                 ; 0000 0029                 putchar(code[i]);
                 ; 0000 002A             break;
                 ; 0000 002B             case 5:
                 _0xB:
0000a6 30e5      	CPI  R30,LOW(0x5)
0000a7 e0a0      	LDI  R26,HIGH(0x5)
0000a8 07fa      	CPC  R31,R26
0000a9 f421      	BRNE _0xC
                 ; 0000 002C                 code[i] = 5;
0000aa 940e 0139 	CALL SUBOPT_0x0
0000ac e0a5      	LDI  R26,LOW(5)
0000ad c04f      	RJMP _0x1C
                 ; 0000 002D                 //lcd_putchar('5');
                 ; 0000 002E                 putchar(code[i]);
                 ; 0000 002F             break;
                 ; 0000 0030             case 6:
                 _0xC:
0000ae 30e6      	CPI  R30,LOW(0x6)
0000af e0a0      	LDI  R26,HIGH(0x6)
0000b0 07fa      	CPC  R31,R26
0000b1 f421      	BRNE _0xD
                 ; 0000 0031                 code[i] = 2;
0000b2 940e 0139 	CALL SUBOPT_0x0
0000b4 e0a2      	LDI  R26,LOW(2)
0000b5 c047      	RJMP _0x1C
                 ; 0000 0032                 //lcd_putchar('2');
                 ; 0000 0033                 putchar(code[i]);
                 ; 0000 0034             break;
                 ; 0000 0035             case 7:
                 _0xD:
0000b6 30e7      	CPI  R30,LOW(0x7)
0000b7 e0a0      	LDI  R26,HIGH(0x7)
0000b8 07fa      	CPC  R31,R26
0000b9 f421      	BRNE _0xE
                 ; 0000 0036                 code[i] = 0;
0000ba 940e 0139 	CALL SUBOPT_0x0
0000bc e0a0      	LDI  R26,LOW(0)
0000bd c03f      	RJMP _0x1C
                 ; 0000 0037                 //lcd_putchar('0');
                 ; 0000 0038                 putchar(code[i]);
                 ; 0000 0039             break;
                 ; 0000 003A             case 8:
                 _0xE:
0000be 30e8      	CPI  R30,LOW(0x8)
0000bf e0a0      	LDI  R26,HIGH(0x8)
0000c0 07fa      	CPC  R31,R26
0000c1 f421      	BRNE _0xF
                 ; 0000 003B                 code[i] = 9;
0000c2 940e 0139 	CALL SUBOPT_0x0
0000c4 e0a9      	LDI  R26,LOW(9)
0000c5 c037      	RJMP _0x1C
                 ; 0000 003C                 //lcd_putchar('9');
                 ; 0000 003D                 putchar(code[i]);
                 ; 0000 003E             break;
                 ; 0000 003F             case 9:
                 _0xF:
0000c6 30e9      	CPI  R30,LOW(0x9)
0000c7 e0a0      	LDI  R26,HIGH(0x9)
0000c8 07fa      	CPC  R31,R26
0000c9 f421      	BRNE _0x10
                 ; 0000 0040                 code[i] = 6;
0000ca 940e 0139 	CALL SUBOPT_0x0
0000cc e0a6      	LDI  R26,LOW(6)
0000cd c02f      	RJMP _0x1C
                 ; 0000 0041                 //lcd_putchar('6');
                 ; 0000 0042                 putchar(code[i]);
                 ; 0000 0043             break;
                 ; 0000 0044             case 10:
                 _0x10:
0000ce 30ea      	CPI  R30,LOW(0xA)
0000cf e0a0      	LDI  R26,HIGH(0xA)
0000d0 07fa      	CPC  R31,R26
0000d1 f421      	BRNE _0x11
                 ; 0000 0045                 code[i] = 3;
0000d2 940e 0139 	CALL SUBOPT_0x0
0000d4 e0a3      	LDI  R26,LOW(3)
0000d5 c027      	RJMP _0x1C
                 ; 0000 0046                 //lcd_putchar('3');
                 ; 0000 0047                 putchar(code[i]);
                 ; 0000 0048             break;
                 ; 0000 0049             case 11:
                 _0x11:
0000d6 30eb      	CPI  R30,LOW(0xB)
0000d7 e0a0      	LDI  R26,HIGH(0xB)
0000d8 07fa      	CPC  R31,R26
0000d9 f421      	BRNE _0x12
                 ; 0000 004A                 code[i] = 'N';
0000da 940e 0139 	CALL SUBOPT_0x0
0000dc e4ae      	LDI  R26,LOW(78)
0000dd c01f      	RJMP _0x1C
                 ; 0000 004B                 //lcd_putchar('N');
                 ; 0000 004C                 putchar(code[i]);
                 ; 0000 004D             break;
                 ; 0000 004E             case 12:
                 _0x12:
0000de 30ec      	CPI  R30,LOW(0xC)
0000df e0a0      	LDI  R26,HIGH(0xC)
0000e0 07fa      	CPC  R31,R26
0000e1 f421      	BRNE _0x13
                 ; 0000 004F                 code[i] = 'A';
0000e2 940e 0139 	CALL SUBOPT_0x0
0000e4 e4a1      	LDI  R26,LOW(65)
0000e5 c017      	RJMP _0x1C
                 ; 0000 0050                 //lcd_putchar('A');
                 ; 0000 0051                 putchar(code[i]);
                 ; 0000 0052             break;
                 ; 0000 0053             case 13:
                 _0x13:
0000e6 30ed      	CPI  R30,LOW(0xD)
0000e7 e0a0      	LDI  R26,HIGH(0xD)
0000e8 07fa      	CPC  R31,R26
0000e9 f421      	BRNE _0x14
                 ; 0000 0054                 code[i] = 'L';
0000ea 940e 0139 	CALL SUBOPT_0x0
0000ec e4ac      	LDI  R26,LOW(76)
0000ed c00f      	RJMP _0x1C
                 ; 0000 0055                 //lcd_putchar('L');
                 ; 0000 0056                 putchar(code[i]);
                 ; 0000 0057             break;
                 ; 0000 0058             case 14:
                 _0x14:
0000ee 30ee      	CPI  R30,LOW(0xE)
0000ef e0a0      	LDI  R26,HIGH(0xE)
0000f0 07fa      	CPC  R31,R26
0000f1 f421      	BRNE _0x15
                 ; 0000 0059                 code[i] = 'P';
0000f2 940e 0139 	CALL SUBOPT_0x0
0000f4 e5a0      	LDI  R26,LOW(80)
0000f5 c007      	RJMP _0x1C
                 ; 0000 005A                 //lcd_putchar('P');
                 ; 0000 005B                 putchar(code[i]);
                 ; 0000 005C             break;
                 ; 0000 005D             case 15:
                 _0x15:
0000f6 30ef      	CPI  R30,LOW(0xF)
0000f7 e0a0      	LDI  R26,HIGH(0xF)
0000f8 07fa      	CPC  R31,R26
0000f9 f441      	BRNE _0x6
                 ; 0000 005E                 code[i] = 'O';
0000fa 940e 0139 	CALL SUBOPT_0x0
0000fc e4af      	LDI  R26,LOW(79)
                 _0x1C:
0000fd 83a0      	STD  Z+0,R26
                 ; 0000 005F                 //lcd_putchar('O');
                 ; 0000 0060                 putchar(code[i]);
0000fe 940e 0139 	CALL SUBOPT_0x0
000100 81a0      	LD   R26,Z
000101 d030      	RCALL _putchar
                 ; 0000 0061         }
                 _0x6:
                 ; 0000 0062         i++;
000102 9453      	INC  R5
                 ; 0000 0063     }
                 ; 0000 0064 
                 ; 0000 0065 }
                 _0x3:
000103 91e9      	LD   R30,Y+
000104 bfef      	OUT  SREG,R30
000105 91f9      	LD   R31,Y+
000106 91e9      	LD   R30,Y+
000107 91b9      	LD   R27,Y+
000108 91a9      	LD   R26,Y+
000109 9199      	LD   R25,Y+
00010a 9189      	LD   R24,Y+
00010b 9179      	LD   R23,Y+
00010c 9169      	LD   R22,Y+
00010d 90f9      	LD   R15,Y+
00010e 9019      	LD   R1,Y+
00010f 9009      	LD   R0,Y+
000110 9518      	RETI
                 ; .FEND
                 ;
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 006A {
                 _main:
                 ; .FSTART _main
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D     // External Interrupt(s) initialization
                 ; 0000 006E     // INT0: On
                 ; 0000 006F     // INT0 Mode: Falling Edge
                 ; 0000 0070     // INT1: Off
                 ; 0000 0071     // INT2: Off
                 ; 0000 0072     GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
000111 b7eb      	IN   R30,0x3B
000112 64e0      	ORI  R30,0x40
000113 bfeb      	OUT  0x3B,R30
                 ; 0000 0073     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000114 e0e2      	LDI  R30,LOW(2)
000115 bfe5      	OUT  0x35,R30
                 ; 0000 0074     MCUCSR=(0<<ISC2);
000116 e0e0      	LDI  R30,LOW(0)
000117 bfe4      	OUT  0x34,R30
                 ; 0000 0075     GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000118 e4e0      	LDI  R30,LOW(64)
000119 bfea      	OUT  0x3A,R30
                 ; 0000 0076 
                 ; 0000 0077     // USART initialization
                 ; 0000 0078     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0079     // USART Receiver: Off
                 ; 0000 007A     // USART Transmitter: On
                 ; 0000 007B     // USART Mode: Asynchronous
                 ; 0000 007C     // USART Baud Rate: 9600
                 ; 0000 007D     UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00011a e0e0      	LDI  R30,LOW(0)
00011b b9eb      	OUT  0xB,R30
                 ; 0000 007E     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00011c e0e8      	LDI  R30,LOW(8)
00011d b9ea      	OUT  0xA,R30
                 ; 0000 007F     UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00011e e8e6      	LDI  R30,LOW(134)
00011f bde0      	OUT  0x20,R30
                 ; 0000 0080     UBRRH=0x00;
000120 e0e0      	LDI  R30,LOW(0)
000121 bde0      	OUT  0x20,R30
                 ; 0000 0081     UBRRL=0x33;
000122 e3e3      	LDI  R30,LOW(51)
000123 b9e9      	OUT  0x9,R30
                 ; 0000 0082 
                 ; 0000 0083     //lcd_init(16);
                 ; 0000 0084 
                 ; 0000 0085     #asm("sei")
000124 9478      	sei
                 ; 0000 0086 
                 ; 0000 0087     while (1)
                 _0x17:
                 ; 0000 0088     {
                 ; 0000 0089         if(i == 17)
000125 e1e1      	LDI  R30,LOW(17)
000126 15e5      	CP   R30,R5
000127 f441      	BRNE _0x1A
                 ; 0000 008A         {
                 ; 0000 008B             i = 0;
000128 2455      	CLR  R5
                 ; 0000 008C             flag = 1;
000129 e0e1      	LDI  R30,LOW(1)
00012a 2e4e      	MOV  R4,R30
                 ; 0000 008D             //lcd_clear();
                 ; 0000 008E             delay_ms(5000);
00012b e8a8      	LDI  R26,LOW(5000)
00012c e1b3      	LDI  R27,HIGH(5000)
00012d 940e 013e 	CALL _delay_ms
                 ; 0000 008F             flag = 0;
00012f 2444      	CLR  R4
                 ; 0000 0090         }
                 ; 0000 0091     }
                 _0x1A:
000130 cff4      	RJMP _0x17
                 ; 0000 0092 }
                 _0x1B:
000131 cfff      	RJMP _0x1B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000132 93aa      	ST   -Y,R26
                 putchar0:
000133 9b5d           sbis usr,udre
000134 cffe           rjmp putchar0
000135 81e8           ld   r30,y
000136 b9ec           out  udr,r30
000137 9621      	ADIW R28,1
000138 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _code:
000260           	.BYTE 0x11
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x0:
000139 2de5      	MOV  R30,R5
00013a e0f0      	LDI  R31,0
00013b 5ae0      	SUBI R30,LOW(-_code)
00013c 4ffd      	SBCI R31,HIGH(-_code)
00013d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00013e 9610      	adiw r26,0
00013f f039      	breq __delay_ms1
                 __delay_ms0:
000140 95a8      	wdr
                +
000141 ed80     +LDI R24 , LOW ( 0x7D0 )
000142 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000143 9701     +SBIW R24 , 1
000144 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000145 9711      	sbiw r26,1
000146 f7c9      	brne __delay_ms0
                 __delay_ms1:
000147 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   5 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  59 r27:   7 r28:   2 r29:   1 r30:  67 r31:  23 
x  :   4 y  :  26 z  :  10 
Registers used: 18 out of 35 (51.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  19 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :  15 cpi   :  15 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   1 jmp   :  22 ld    :  15 ldd   :   0 ldi   :  60 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  17 pop   :   0 push  :   0 rcall :   1 ret   :   3 
reti  :   1 rjmp  :  20 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   1 sts   :   0 sub   :   0 subi  :   2 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 34 out of 116 (29.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000290    628     28    656   32768   2.0%
[.dseg] 0x000060 0x000271      0     17     17    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
