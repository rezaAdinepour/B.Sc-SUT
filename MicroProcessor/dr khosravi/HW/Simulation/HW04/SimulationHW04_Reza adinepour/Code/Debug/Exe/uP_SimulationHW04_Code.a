;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define display PORTC
;#define com PORTD
;#define display_calendar PORTA
;#define calendar_com PORTB
;#define set_time PINB.6
;#define set PINB.7
;#define rest_second PIND.7
;#define set_cal PIND.6
;#define on 0
;#define off 1
;
;
;
;unsigned char digit[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}, hour = 0, minute = 0, second = 0 ...

	.DSEG
;unsigned char i = 0, mode = 122;
;
;enum st
;{
;    live_time,
;    set_hour,
;    set_minute,
;    set_calendar
;}state;
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021     i++;
;PCODE: $0000000F VOL: 0
; 0000 0022 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;void main(void)
; 0000 0025 {
;PCODE: $00000013 VOL: 0
; 0000 0026 
; 0000 0027     DDRA = 0xff;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028     PORTA = 0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0029 
; 0000 002A     DDRB = 0xff;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002B     PORTB = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002C 
; 0000 002D     DDRC = 0xff;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002E     PORTC = 0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002F 
; 0000 0030     DDRD = 0xff;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0031     PORTD = 0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0032 
; 0000 0033     // Timer/Counter 0 initialization
; 0000 0034     // Clock source: System Clock
; 0000 0035     // Clock value: 31.250 kHz
; 0000 0036     // Mode: Normal top=0xFF
; 0000 0037     // OC0 output: Disconnected
; 0000 0038     // Timer Period: 8.192 ms
; 0000 0039     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003A     TCNT0=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B     OCR0=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C 
; 0000 003D     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 003E     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003F 
; 0000 0040 
; 0000 0041 
; 0000 0042 // Global enable interrupts
; 0000 0043 #asm("sei")
;PCODE: $0000002C VOL: 0
	sei
;PCODE: $0000002D VOL: 0
; 0000 0044 
; 0000 0045 
; 0000 0046     while (1)
;PCODE: $0000002E VOL: 0
; 0000 0047     {
; 0000 0048         //========== display calendar ==========
; 0000 0049         display_calendar = digit[year / 10];
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004A         calendar_com = 0xfe; //1111 1110
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004B         delay_us(250);
;PCODE: $00000038 VOL: 0
; 0000 004C         calendar_com = 0xff;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004D         display_calendar = digit[year % 10];
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004E         calendar_com = 0xfd; //1111 1101
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004F         delay_us(250);
;PCODE: $00000044 VOL: 0
; 0000 0050         calendar_com = 0xff;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051 
; 0000 0052         display_calendar = digit[month / 10];
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0053         calendar_com = 0xfb; //1111 1011
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0054         delay_us(250);
;PCODE: $00000050 VOL: 0
; 0000 0055         calendar_com = 0xff;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0056         display_calendar = digit[month % 10];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0057         calendar_com = 0xf7; //1111 0111
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0058         delay_us(250);
;PCODE: $0000005C VOL: 0
; 0000 0059         calendar_com = 0xff;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005A 
; 0000 005B         display_calendar = digit[day / 10];
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005C         calendar_com = 0xef; //1110 1111
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005D         delay_us(250);
;PCODE: $00000068 VOL: 0
; 0000 005E         calendar_com = 0xff;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005F         display_calendar = digit[day % 10];
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0060         calendar_com = 0xdf; //1101 1111
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0061         delay_us(250);
;PCODE: $00000074 VOL: 0
; 0000 0062         calendar_com = 0xff;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0063 
; 0000 0064         //========== display time ==========
; 0000 0065         display = digit[hour / 10];
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0066         com = 0xfe; //1111 1110
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0067         delay_us(250);
;PCODE: $00000080 VOL: 0
; 0000 0068         com = 0xff;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0069         display = digit[hour % 10];
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006A         com = 0xfd; //1111 1101
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006B         delay_us(250);
;PCODE: $0000008C VOL: 0
; 0000 006C         com = 0xff;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006D 
; 0000 006E         display = digit[minute / 10];
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 006F         com = 0xfb; //1111 1011
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0070         delay_us(250);
;PCODE: $00000098 VOL: 0
; 0000 0071         com = 0xff;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0072         display = digit[minute % 10];
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0073         com = 0xf7; //1111 0111
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0074         delay_us(250);
;PCODE: $000000A4 VOL: 0
; 0000 0075         com = 0xff;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0076 
; 0000 0077         display = digit[second / 10];
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0078         com = 0xef; //1110 1111
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0079         delay_us(250);
;PCODE: $000000B0 VOL: 0
; 0000 007A         com = 0xff;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 007B         display = digit[second % 10];
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 007C         com = 0xdf; //1101 1111
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 007D         delay_us(250);
;PCODE: $000000BC VOL: 0
; 0000 007E         com = 0xff;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 007F 
; 0000 0080         switch(state)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0081         {
; 0000 0082             case live_time:
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0083                 if(i > mode) //1000ms / 8.192ms = 122
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0084                 {
; 0000 0085                     i = 0;
;PCODE: $000000C6 VOL: 0
; 0000 0086                     second++;
;PCODE: $000000C7 VOL: 0
; 0000 0087                     if(second > 59)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0088                     {
; 0000 0089                         second = 0;
;PCODE: $000000CB VOL: 0
; 0000 008A                         minute++;
;PCODE: $000000CC VOL: 0
; 0000 008B                         if(minute > 59)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 008C                         {
; 0000 008D                             minute = 0;
;PCODE: $000000D0 VOL: 0
; 0000 008E                             hour++;
;PCODE: $000000D1 VOL: 0
; 0000 008F                             if(hour > 12)
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0090                             {
; 0000 0091                                 hour = minute = second = 0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0092                                 day++;
;PCODE: $000000D9 VOL: 0
; 0000 0093                                 if(day > 30)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0094                                 {
; 0000 0095                                     day = 0;
;PCODE: $000000DD VOL: 0
; 0000 0096                                     month++;
;PCODE: $000000DE VOL: 0
; 0000 0097                                     if(month > 12)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0098                                     {
; 0000 0099                                         month = 0;
;PCODE: $000000E2 VOL: 0
; 0000 009A                                         year++;
;PCODE: $000000E3 VOL: 0
; 0000 009B                                     }
; 0000 009C                                 }
;PCODE: $000000E4 VOL: 0
; 0000 009D 
; 0000 009E                             }
;PCODE: $000000E5 VOL: 0
; 0000 009F 
; 0000 00A0                         }
;PCODE: $000000E6 VOL: 0
; 0000 00A1                     }
;PCODE: $000000E7 VOL: 0
; 0000 00A2                 }
;PCODE: $000000E8 VOL: 0
; 0000 00A3                 if(set_time == 0)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A4                 {
; 0000 00A5                     while(set_time == 0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00A6                     state = set_hour;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00A7                 }
; 0000 00A8                 if(set == 0)
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A9                 {
; 0000 00AA                     while(set == 0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00AB                     mode = 1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00AC                 }
; 0000 00AD                 if(rest_second == 0)
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00AE                 {
; 0000 00AF                     while(rest_second == 0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B0                     second = 0;
;PCODE: $0000010B VOL: 0
; 0000 00B1                 }
; 0000 00B2                 if(set_cal == 0)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00B3                 {
; 0000 00B4                     while(set_calendar == 0);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B5                     state = set_calendar;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B6                 }
; 0000 00B7             break;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B8 
; 0000 00B9             case set_hour:
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00BA                 if(set_time == 0)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00BB                 {
; 0000 00BC                     while(set_time == 0);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00BD                     hour++;
;PCODE: $00000124 VOL: 0
; 0000 00BE                     if(hour > 23)
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00BF                         hour = 0;
;PCODE: $00000128 VOL: 0
; 0000 00C0                 }
;PCODE: $00000129 VOL: 0
; 0000 00C1                 if(set == 0)
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C2                 {
; 0000 00C3                     while(set == 0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00C4                     state = set_minute;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00C5                 }
; 0000 00C6             break;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00C7 
; 0000 00C8             case set_minute:
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00C9                 if(set_time == 0)
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00CA                 {
; 0000 00CB                     while(set_time == 0);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00CC                     minute++;
;PCODE: $00000144 VOL: 0
; 0000 00CD                     if(minute > 59)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00CE                         minute = 0;
;PCODE: $00000148 VOL: 0
; 0000 00CF                 }
;PCODE: $00000149 VOL: 0
; 0000 00D0                 if(set == 0)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00D1                 {
; 0000 00D2                     while(set == 0);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00D3                     state = live_time;
;PCODE: $00000154 VOL: 0
; 0000 00D4                     mode = 122;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00D5                 }
; 0000 00D6             break;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D7 
; 0000 00D8             case set_calendar:
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00D9                 if(set_cal == 0)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00DA                 {
; 0000 00DB                     while(set_cal == 0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00DC                     year++;
;PCODE: $00000165 VOL: 0
; 0000 00DD                     if(year > 99)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00DE                         year = 0;
;PCODE: $00000169 VOL: 0
; 0000 00DF                 }
;PCODE: $0000016A VOL: 0
; 0000 00E0 
; 0000 00E1                 if(set_time == 0)
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00E2                 {
; 0000 00E3                     while(set_time == 0);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00E4                     month++;
;PCODE: $00000175 VOL: 0
; 0000 00E5                     if(month > 12)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00E6                         month = 0;
;PCODE: $00000179 VOL: 0
; 0000 00E7                 }
;PCODE: $0000017A VOL: 0
; 0000 00E8                 if(set == 0)
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E9                 {
; 0000 00EA                     while(set == 0);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00EB                     day++;
;PCODE: $00000185 VOL: 0
; 0000 00EC                     if(day > 30)
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00ED                         day = 0;
;PCODE: $00000189 VOL: 0
; 0000 00EE                 }
;PCODE: $0000018A VOL: 0
; 0000 00EF                 if(rest_second == 0)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00F0                 {
; 0000 00F1                     while(rest_second == 0);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00F2                     state = live_time;
;PCODE: $00000195 VOL: 0
; 0000 00F3                     mode = 122;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00F4                 }
; 0000 00F5         }//End Switch()
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00F6     }//End while()
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00F7 }//End main()
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;
;
;
;
;
;
;/*
;void mux_6digit_sevenSeg_display(void)
;{
;    unsigned char k;
;    for(k = 0; k < 100; k++)
;    {
;        display = digit[hour / 10];
;        com = 0xfe; //1111 1110
;        delay_us(250);
;        com = 0xff;
;        display = digit[hour % 10];
;        com = 0xfd; //1111 1101
;        delay_us(250);
;        com = 0xff;
;
;        display = digit[minute / 10];
;        com = 0xfb; //1111 1011
;        delay_us(250);
;        com = 0xff;
;        display = digit[minute % 10];
;        com = 0xf7; //1111 0111
;        delay_us(250);
;        com = 0xff;
;
;        display = digit[second / 10];
;        com = 0xef; //1110 1111
;        delay_us(250);
;        com = 0xff;
;        display = digit[second % 10];
;        com = 0xdf; //1101 1111
;        delay_us(250);
;        com = 0xff;
;    }
;}
;*/
